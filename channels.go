package spontit

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Channel contains attributes for a channel
type Channel struct {
	// The display name of your channel.
	Name string `json:"channelName"`
	// Supplied during the creation of a channel. Defines the category for your channel.
	Code float64 `json:"categoryCode,omitempty"`
	// This is generated by the server. The ID of your channel.
	ID string `json:"channelId,omitempty"`
	// This is generated by the server. A unique code with which users can find your channel.
	ReferralCode string `json:"referralCode,omitempty"`
	// This is generated by the server. Instructions for users can join the Spontit app and follow your channel by texting your code to the provided number.
	TextReferral string `json:"textReferralString,omitempty"`
	// This is generated by the server. The unique link to your channel.
	Link string `json:"link,omitempty"`
	// This is generated by the server. A link to a QR code for referring users to your channel.
	QRCodeLink string `json:"qrCodeLink,omitempty"`
	// Currently undocumented.
	AutoAddFutureFollowers bool `json:"autoAddFutureFollowers,omitempty"`
	// Currently undocumented.
	AddAllFollowers bool `json:"addAllFollowers,omitempty"`
}

type channelResult struct {
	Data Channel `json:"data"`
}

type channelsResult struct {
	Data []*Channel `json:"data"`
}

// CreateChannel creates a channel
func (c *Client) CreateChannel(name string) (*Channel, error) {
	if name == "" {
		return nil, fmt.Errorf("Name is required")
	}

	reqJSON, err := json.Marshal(&Channel{Name: name})
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodPost, fmt.Sprintf("%s/channel", baseURL), bytes.NewBuffer(reqJSON))
	if err != nil {
		return nil, err
	}
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("X-Authorization", c.config.key)
	req.Header.Add("X-UserId", c.config.userID)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	content, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	channelResult := new(channelResult)
	json.Unmarshal(content, channelResult)

	return &channelResult.Data, nil
}

func (c *Client) GetChannel(name string) (*Channel, error) {
	if name == "" {
		return nil, fmt.Errorf("Name is required")
	}

	reqJSON, err := json.Marshal(&Channel{Name: name})
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/channel", baseURL), bytes.NewBuffer(reqJSON))
	if err != nil {
		return nil, err
	}
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("X-Authorization", c.config.key)
	req.Header.Add("X-UserId", c.config.userID)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	content, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	channelResult := new(channelResult)
	json.Unmarshal(content, channelResult)

	return &channelResult.Data, nil
}

// DeleteChannel deletes a channel
func (c *Client) DeleteChannel(name string) error {
	if name == "" {
		return fmt.Errorf("Name is required")
	}

	reqJSON, err := json.Marshal(&Channel{Name: name})
	if err != nil {
		return err
	}

	req, err := http.NewRequest(http.MethodDelete, fmt.Sprintf("%s/channel", baseURL), bytes.NewBuffer(reqJSON))
	if err != nil {
		return err
	}
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("X-Authorization", c.config.key)
	req.Header.Add("X-UserId", c.config.userID)

	_, err = c.httpClient.Do(req)
	return err
}

// Channels returns a list of your channels
func (c *Client) Channels() ([]*Channel, error) {
	req, err := http.NewRequest(http.MethodGet, fmt.Sprintf("%s/channels", baseURL), nil)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("X-Authorization", c.config.key)
	req.Header.Add("X-UserId", c.config.userID)

	resp, err := c.httpClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	content, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	channels := new(channelsResult)
	json.Unmarshal(content, channels)

	return channels.Data, nil
}
